import tkinter as tk
import time

root = tk.Tk()
fr = tk.Frame(root)
root.geometry('1200x800')
canv = tk.Canvas(root, bg='white')
canv.pack(fill=tk.BOTH, expand=1)
r = 10 #радиус
l = 50 #длина связи
d = 1 #delta l
global l, r
def one_bond(x,y, l, nucleotide_type):
    if nucleotide_type == "A" or nucleotide_type == 'T':
        if nucleotide_type == "A":
            color1 = "red"
            color2 = "green"
        elif nucleotide_type == "T":
            color1 = "green"
            color2 = "red"
        canv.create_line(x-l, y-(r/2), x+l, y-(r/2))
        canv.create_line(x-l, y+(r/2), x+l, y+(r/2))
    elif nucleotide_type == "G" or nucleotide_type == 'C':
        if nucleotide_type == "C":
            color1 = "yellow"
            color2 = "blue"
        elif nucleotide_type == "G":
            color1 = "blue"
            color2 = "yellow"
        canv.create_line(x-l, y-(r/2), x+l, y-(r/2))
        canv.create_line(x-l, y, x+l, y)
        canv.create_line(x-l, y+(r/2), x+l, y+(r/2))
    canv.create_oval(x-l-r, y-r, x-l+r, y+r, outline="black", 
    fill=color1, width=2)
    canv.create_oval(x+l-r, y-r, x+l+r, y+r, outline="black", 
    fill=color2, width=2)
def bond_rotation(x, y, l ,nucleotide_type):
    if nucleotide_type == "A" or nucleotide_type == 'T':
        if nucleotide_type == "A":
            color1 = "red"
            color2 = "green"
        elif nucleotide_type == "T":
            color1 = "green"
            color2 = "red"
        canv.create_line(x-l, y-(r/2), x+l, y-(r/2))
        canv.create_line(x-l, y+(r/2), x+l, y+(r/2))
    elif nucleotide_type == "G" or nucleotide_type == 'C':
        if nucleotide_type == "C":
            color1 = "yellow"
            color2 = "blue"
        elif nucleotide_type == "G":
            color1 = "blue"
            color2 = "yellow"
        canv.create_line(x-l, y-(r/2), x+l, y-(r/2))
        canv.create_line(x-l, y, x+l, y)
        canv.create_line(x-l, y+(r/2), x+l, y+(r/2))
    canv.create_oval(x+l-(1/2)*r, y-(1/2)*r, x+l+(1/2)*r, y+(1/2)*r, outline="black", 
    fill=color2, width=2)
    canv.create_oval(x-l-(3/2)*r, y-(3/2)*r, x-l+(3/2)*r, y+(3/2)*r, outline="black", 
    fill=color1, width=2)
def bond_moving(x, y, nucleotide_type):
    #Вращает связь. Немного шакально.
    global l
    for i in range (20):
        for i in range (25):
            canv.delete(tk.ALL)
            l -= d
            one_bond(x, y,l, nucleotide_type)
            canv.update()
            time.sleep(0.03)
        for i in range (50):
            canv.delete(tk.ALL)
            l -= d
            if nucleotide_type == "A":
                bond_rotation(x, y, l, "A")
            elif nucleotide_type == "T":
                bond_rotation(x, y, l, "T")
            elif nucleotide_type == "G":
                bond_rotation(x, y, l, "G")
            elif nucleotide_type == "C":
                bond_rotation(x, y, l, "C")
            canv.update()
            time.sleep(0.03)
        for i in range (25):
            canv.delete(tk.ALL)
            l -= d
            one_bond(x, y, l, nucleotide_type)
            canv.update()
            time.sleep(0.03)
        for i in range (25):
            canv.delete(tk.ALL)
            l += d
            one_bond(x, y, l, nucleotide_type)
            canv.update()
            time.sleep(0.03)
        for i in range (50):
            canv.delete(tk.ALL)
            l += d
            if nucleotide_type == "A":
                bond_rotation(x, y, -l, "T")
            elif nucleotide_type == "T":
                bond_rotation(x, y, -l, "A")
            elif nucleotide_type == "G":
                bond_rotation(x, y, -l, "C")
            elif nucleotide_type == "C":
                bond_rotation(x, y, -l, "G")
            canv.update()
            time.sleep(0.03)
        for i in range (25):
            canv.delete(tk.ALL)
            l += d
            one_bond(x, y, l, nucleotide_type)
            canv.update()
            time.sleep(0.03)
        
      #  """"if nucleotide_type == "A":
       #     nucleotide_type = "T"
      #  elif nucleotide_type == "T":
       #     nucleotide_type = "A"
      #  elif nucleotide_type == "G":
      #      nucleotide_type = "C"
      #  elif nucleotide_type == "C":
      #      nucleotide_type = "G""""
        
    
bond_moving(700,300, "A")
